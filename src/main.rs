use std::fs;

use crate::{bytecode::Function, rt::RtType};

pub mod ast;
mod bytecode;
mod funcs;
mod game_ctx;
mod lexer;
mod nan_box;
mod parser;
mod rt;
mod vm;
mod span;

fn main() {
    let tokens = lexer::lex(&fs::read_to_string("./code/first.cgs").unwrap()).unwrap();
    println!("lexed {} tokens: {:?}", tokens.len(), tokens);
    let ast = parser::parse(tokens).unwrap();
    println!("parsed ast: {:?}", ast);
    let fns = vec![Function {
        params: &[RtType::String],
        name: "print".to_string(),
        call: funcs::println,
        var_len: true,
    }];
    let byte_code = bytecode::translate(&ast, &fns);
    println!(
        "generated byte code ({} ops): {:?}",
        byte_code.len(),
        byte_code
    );
    let mut vm = vm::Vm::new(byte_code, fns);
    println!("started vm");
    vm.run();
}
