use std::fs;

pub use crate::{
    bytecode::Function,
    rt::{CardInventory, CardInventoryRef, CardVal, Player, RtRef, RtType},
};

mod ast;
mod bytecode;
mod error;
mod funcs;
mod lexer;
mod nan_box;
mod parser;
mod rt;
mod span;
mod vm;

pub fn run(path: &str, mut funcs: Vec<Function>) -> anyhow::Result<()> {
    if !funcs.iter().any(|fun| fun.name == "println") {
        funcs.push(Function {
            params: &[RtType::String],
            name: "println",
            call: funcs::println,
            var_len: true,
        });
    }
    let tokens = lexer::lex(&fs::read_to_string(path).unwrap()).unwrap();
    println!("lexed {} tokens: {:?}", tokens.len(), tokens);
    let ast = parser::parse(tokens).unwrap();
    println!("parsed ast: {:?}", ast);
    let byte_code = bytecode::translate(&ast, &funcs);
    println!(
        "generated byte code ({} ops): {:?}",
        byte_code.len(),
        byte_code
    );
    let mut vm = vm::Vm::new(byte_code, funcs);
    println!("started vm");
    vm.run();
    Ok(())
}
