use std::fs;

pub use crate::{bytecode::Function, rt::{RtType, RtRef, CardInventory, CardInventoryRef, CardVal, Player}};

mod ast;
mod bytecode;
mod funcs;
mod lexer;
mod nan_box;
mod parser;
mod rt;
mod vm;

pub fn run(path: &str, mut funcs: Vec<Function>) -> anyhow::Result<()> {
    let tokens = lexer::lex(&fs::read_to_string(path).unwrap()).unwrap();
    println!("lexed {} tokens: {:?}", tokens.len(), tokens);
    let ast = parser::parse(tokens).unwrap();
    println!("parsed ast: {:?}", ast);
    funcs.push(Function {
        params: &[RtType::String],
        name: "print",
        call: funcs::println,
        var_len: true,
    });
    let byte_code = bytecode::translate(&ast, &funcs);
    println!(
        "generated byte code ({} ops): {:?}",
        byte_code.len(),
        byte_code
    );
    let mut vm = vm::Vm::new(byte_code, funcs);
    println!("started vm");
    vm.run();
    Ok(())
}
